import dataclasses
import typing as T

import torch as th


@dataclasses.dataclass
class PendulumParams:
    m_b: float
    m_1: float
    m_2: float
    l_1: float
    l_2: float
    g: float


def pendulum_dynamics(
    params: PendulumParams,
    x: th.tensor,
    u: th.tensor,
    compute_J_x: bool,
    compute_J_u: bool,
) -> T.Tuple[th.tensor, T.Optional[th.tensor], T.Optional[th.tensor]]:
    x = x.reshape((6, 1))
    # Operation counts:
    # add: 76
    # branch: 2
    # call: 4
    # divide: 2
    # multiply: 269
    # negate: 15
    # total: 368
    v00012 = x[2, 0]
    v00004 = x[1, 0]
    v00020 = th.sin(v00012)
    v00019 = th.sin(v00004)
    v00013 = th.cos(v00012)
    v00005 = th.cos(v00004)
    v00010 = params.m_2
    v00977 = v00019 * v00020
    v01086 = params.m_1 + v00010
    v00249 = v00005 * v00013 + v00977
    v01089 = -v00010
    v01097 = -v01086
    v00038 = params.m_b + v01086
    v01090 = -v00019
    v00508 = v00019 * v01097
    v00002 = x[5, 0]
    v00014 = params.l_2
    v00001 = x[4, 0]
    v00008 = params.l_1
    v00512 = v00038 + v00020 * v00020 * v01089
    v01033 = v01090 * v01097
    v00913 = v00038 * v00249
    v00941 = v00013 * v00019
    v00869 = v00002 * v00002
    v00842 = v00010 * v00014
    v00923 = v00005 * v00020
    v00865 = v00001 * v00001
    v00847 = v00008 * v01086
    v00853 = v00001 * v00008
    v00358 = v00020 * -v00005 + v00941
    v00051 = params.g
    v01020 = v00005 * v01097
    v01015 = v00842 * v00869
    v00309 = v00013 * v01090 + v00923
    v01017 = v00847 * v00865
    v00843 = v00008 * v00014
    v00694 = (
        v00249 * v00913 * v01089
        + ((v00010 * float(2)) * (v00020 * v00249) + v00508) * v01033
        + v00512 * v01086
    )
    v00686 = v00020 + v00249 * v01090
    v01087 = -v00008
    v00521 = v00508 + v00020 * (v00010 * v00249)
    v00003 = u
    v01006 = v00842 * v00843
    v00864 = v00686 * v01086
    v00844 = v00008 * v00010
    v00535 = v00051 * -v00013 + v00001 * v00358 * v00853
    v00529 = v00309 * v01015 + v00051 * v01020
    v00543 = v00977 * v01097 + v00913
    v01098 = -v00521
    v00246 = v00003 + v00013 * v01015 + v00005 * v01017
    v00689 = v00038 + v01033 * v01090
    v00683 = (v00249 * v00249) * v01089 + v01086
    v00045 = float(1) / ((v00008 * v00694) * v01006)
    v01022 = v00689 * v00847
    v01021 = v00543 * v01087
    v01011 = v00686 * v00847
    v01010 = v00683 * v00843
    v00878 = v00008 * v00246
    v00858 = v00008 * v00045
    v01077 = (v00246 * v01098 + v00535 * v00543 * v01089 + v00512 * v00529) * v01006
    v01013 = v00842 * v00858
    v00710 = v00246 * v01011 + v00529 * v01021 + v00535 * v01022
    v00705 = (
        v00529 * (v00521 * v01087) + v00535 * v00844 * v00864
    ) * v00843 + v00878 * v01010
    v01009 = v00045 * v00842
    if compute_J_x:
        v01038 = v00019 * v01087
        v00600 = v00020 * v00358 + v00013 * v00249
        v01080 = v00694 * v01006
        v00849 = v00008 * v00008
        v00992 = v00038 * v00358
        v00867 = v00008 * v00249
        v00861 = v00019 * v01086
        v00719 = v00005 * v00249 + v00019 * v00309
        v00105 = float(1) / (v00849 * v01080 * v01080)
        v01032 = v00865 * v01087
        v01057 = v00719 * v00844
        v00756 = (
            v00867 * v00992 + (v00013 * (v00008 * v00020) + v00600 * v01038) * v01086
        )
        v01047 = v00521 * -v00014
        v00572 = v01015 * -v00249 + v00051 * v00861
        v00880 = v00008 * v00529
        v00564 = v00309 * (v00010 * v00020) + v01020
        v00623 = v00923 * v01097 + v00038 * v00309
        v01065 = v00756 * (float(2) * v00105)
        v01008 = v00842 * v01087
        v00634 = v00941 * v01097 + v00992
        v00855 = v00008 * float(2)
        v00604 = v00020 * v00051 + v00249 * v01032
        v00744 = v00013 + v00358 * v01090
        v01096 = -v00843
        v01037 = v00008 * v00842
        v01012 = v00842 * v00847
        v00890 = float(2) * v00045
        v01007 = v00842 * v00842
        v00728 = (
            v00005 * (v00861 * v01087) + v00020 * v01057
        ) * v01097 + v00309 * v00844 * v00913
        v00866 = v00005 * v01086
        v01091 = -float(2)
        v01100 = -v00105
        v01083 = v01007 * v01008
        v01078 = v01007 * (v00855 * (v00002 * v00045))
        v01085 = (v00001 * v00842) * (v00849 * v00890)
        J_x = th.tensor(
            [
                float(0),
                float(0),
                float(0),
                float(1),
                float(0),
                float(0),
                float(0),
                float(0),
                float(0),
                float(0),
                float(1),
                float(0),
                float(0),
                float(0),
                float(0),
                float(0),
                float(0),
                float(1),
                float(0),
                v00705 * v01006 * (v00842 * v01091) * (v00728 * v01100)
                + (
                    (
                        (
                            v00564 * v00880
                            + v00572 * (v00008 * v00521)
                            + (v00535 * v01086) * v01057
                        )
                        * v01096
                        + (
                            (float(2) * v00246) * (v00309 * v01087)
                            + v00847 * v00853 * (v00001 * v00686)
                        )
                        * v00842
                        * v00867
                    )
                    + v01010 * v01017 * v01038
                )
                * v01009,
                (v00105 * v00756) * (v00705 * v01091) * v01083
                + (
                    v00604 * (v00008 * v00686) * v01012
                    + v00744 * (v00008 * v00535) * v01012
                    + (
                        v00246 * v00855 * (v00249 * v00358)
                        + v00020 * v00869 * v01010
                        + v00600 * v00880
                        + v00249 * v00843 * (v00521 * v00869)
                    )
                    * v01008
                )
                * v01009,
                float(0),
                (v00358 * v00842 * v01011 + v00866 * v01010) * v01085,
                (v00013 * v01010 + v00309 * (v00843 * v01098)) * v01078,
                float(0),
                v01006 * (v00728 * v01091) * v01077 * v01100
                + (
                    v00512 * v00572 * v00843
                    + (
                        v00246 * v00564
                        + v00623 * (v00010 * v00535)
                        + v00521 * v00861 * v01032
                        + v00844 * v00865 * (v00249 * v00543)
                    )
                    * v01096
                )
                * v01009,
                (
                    (
                        v00600 * -v00246
                        + v00634 * -v00535
                        + v00512 * (v00002 * v00014) * (v00002 * v00249)
                    )
                    * v01037
                    + v00543 * v00604 * v01008
                )
                * v01009
                + -(
                    (
                        v00020 * (v00013 * float(2) * v00529 + v00869 * v01047) * v01013
                        + v01077 * (v01008 * v01065)
                    )
                    * v00842
                ),
                float(0),
                (v00358 * (v00010 * v00543) + v00521 * v00866)
                * v01006
                * (v00001 * v00890)
                * v01087,
                (v00013 * v01047 + v00512 * (v00014 * v00309)) * v01078,
                float(0),
                v00710 * (v00105 * v00728) * (v01006 * v01008) * v01091
                + v00045
                * (
                    (
                        v00623 * v00880
                        + v00572 * (v00008 * v00543)
                        + v00019 * v01011 * v01017
                    )
                    * v01008
                    + (
                        v00008
                        * (
                            float(2) * v00535 * v01020 * v01033
                            + v00249 * v00689 * v01017
                        )
                        + v00719 * (v00246 * v01086) * v01087
                    )
                    * v01037
                ),
                (v00710 * v01087) * v01065 * v01083
                + (
                    v00878 * (v00744 * v00847)
                    + v00634 * v00880 * v01087
                    + (v00008 * v00689) * (v00604 * v00847)
                    + (v00020 * v01011 + v00543 * v00867) * v00869 * v01008
                )
                * v01009,
                float(0),
                (v00358 * v01022 + v00864 * (v00005 * v00847)) * v01085,
                (v00013 * v01011 + v00309 * v01021) * v01078,
            ],
            dtype=th.float64,
        ).reshape(6, 6)
    else:
        J_x = None
    if compute_J_u:
        J_u = th.tensor(
            [
                float(0),
                float(0),
                float(0),
                v00683 * v00858 * v01006,
                (v00045 * v01006) * v01098,
                v01011 * v01013,
            ],
            dtype=th.float64,
        ).reshape(6, 1)
    else:
        J_u = None
    v00000 = x[3, 0]
    x_dot = th.tensor(
        [v00000, v00001, v00002, v00705 * v01009, v00045 * v01077, v00710 * v01013],
        dtype=th.float64,
    ).reshape(6, 1)
    return x_dot, J_x, J_u


xs = th.rand(size=[100, 6], requires_grad=True)
us = th.rand(
    size=[
        100,
    ],
    requires_grad=True,
)

params = PendulumParams(0.5, 0.2, 0.1, 0.4, 0.3, 9.81)

import time

start = time.time()

for x in xs:
    for u in us:
        pendulum_dynamics(params=params, x=x, u=u, compute_J_u=False, compute_J_x=False)

end = time.time()

count = len(xs) * len(us)
tpc = (end - start) / count
print(f"count: {count}")
print(tpc)
print(tpc * 6 * 200 * 200)
