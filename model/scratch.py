"""
Visualize some things.
"""

import sys
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import torch as th

REPO_ROOT = Path(__file__).parent.parent.absolute()
sys.path.insert(0, str(REPO_ROOT / "build" / "wrapper"))

from .train import DynamicsLayer, EnergyLoss, Network


def main():
    step_size = 0.01

    u_controls = th.tensor(
        [
            [
                11.1458281207617,
                11.1468722739094,
                11.1493212257421,
                11.1535333418259,
                11.1598629104255,
                11.1686581251364,
                11.180258763674,
                11.1949934754623,
                11.2131765867638,
                11.2351043283042,
                11.261050387316,
                11.2912606845007,
                11.3259472777032,
                11.3652812995017,
                11.409384847201,
                11.4583217629643,
                11.5120872715056,
                11.5705964856462,
                11.6336718490756,
                11.7010296637778,
                11.7722659493429,
                11.8468420044917,
                11.9240701877213,
                12.0031006017788,
                12.0829095498805,
                12.1622908197898,
                12.2398510287169,
                12.3140104044301,
                12.3830104557463,
                12.444929962135,
                12.497710547169,
                12.5391927547734,
                12.5671629906119,
                12.5794109134553,
                12.5737958857579,
                12.5483199862867,
                12.5012039689489,
                12.4309615857069,
                12.3364670680795,
                12.2170104597465,
                12.0723360305058,
                11.902660192127,
                11.7086670623873,
                11.4914818483917,
                11.2526242363786,
                10.9939456752833,
                10.7175555903587,
                10.4257420460438,
                10.1208922094949,
                9.80541726941922,
                9.48168542188227,
                9.15196534121578,
                8.81838138047169,
                8.48288071585029,
                8.14721183470243,
                7.81291319198786,
                7.48131051532008,
                7.15352109162678,
                6.83046337597246,
                6.51287038018677,
                6.20130548432162,
                5.89617953322239,
                5.59776830731842,
                5.30622967268416,
                5.0216199089868,
                4.7439088791814,
                4.47299383995289,
                4.20871179798795,
                3.95085039698194,
                3.69915737753354,
                3.45334869071449,
                3.21311536996234,
                2.97812927849743,
                2.74804785369621,
                2.52251796822549,
                2.30117902222511,
                2.08366537294237,
                1.86960819911337,
                1.65863688788625,
                1.45038002277344,
                1.24446604239959,
                1.04052363193221,
                0.838181902195039,
                0.637070405650461,
                0.436819033732393,
                0.237057836421742,
                0.0374168024754148,
                -0.162474362665822,
                -0.362986424567442,
                -0.564490735592504,
                -0.767359239451244,
                -0.971964322246447,
                -1.1786784637591,
                -1.38787363765902,
                -1.59992040322087,
                -1.81518662403018,
                -2.03403574117457,
                -2.25682451970304,
                -2.48390017796844,
                -2.71559680024969,
                -2.95223092436634,
                -3.19409618866425,
                -3.44145691787635,
                -3.69454052640772,
                -3.95352862243743,
                -4.21854670921649,
                -4.48965240391761,
                -4.76682213269086,
                -5.04993631694908,
                -5.3387631443334,
                -5.6329411222165,
                -5.93196074535582,
                -6.23514577452774,
                -6.54163481955849,
                -6.85036414459232,
                -7.16005285728331,
                -7.46919189194504,
                -7.77603842654755,
                -8.07861755253157,
                -8.37473310280801,
                -8.66198948675578,
                -8.93782612668962,
                -9.19956558608726,
                -9.4444756882021,
                -9.66984483714621,
                -9.8730684131566,
                -10.0517426252388,
                -10.2037607450954,
                -10.3274054545607,
                -10.4214303789787,
                -10.4851239823683,
                -10.5183499942509,
                -10.5215603866691,
                -10.4957794022289,
                -10.4425598777141,
                -10.3639156741395,
                -10.2622360160533,
                -10.1401886989459,
                -10.0006193651239,
                -9.84645347081078,
                -9.68060638777659,
                -9.50590557011041,
                -9.32502712708904,
                -9.14044767808797,
                -8.95441115464125,
                -8.76890931779375,
                -8.58567417971126,
                -8.40618022339139,
                -8.23165424910903,
                -8.06309078005401,
                -7.90127117428202,
                -7.74678486560731,
                -7.60005145307738,
                -7.46134264878873,
                -7.33080335855131,
                -7.20847139899836,
                -7.09429554413402,
                -6.98815174437739,
                -6.88985747505879,
                -6.79918425374405,
                -6.71586842198756,
                -6.6396203223888,
                -6.57013202095968,
                -6.50708373198088,
                -6.45014910120469,
                -6.39899949623222,
                -6.35330744230534,
                -6.31274932922087,
                -6.27700750176197,
                -6.24577183275787,
                -6.21874086516281,
                -6.1956225977139,
                -6.17613497796177,
                -6.1600061568367,
                -6.14697455041176,
                -6.13678874710475,
                -6.12920729214296,
                -6.12399837560723,
                -6.12093944567629,
                -6.11981676471191,
                -6.12042492246814,
                -6.12256631788817,
                -6.12605061859355,
                -6.13069420520404,
                -6.13631960599157,
                -6.14275492601662,
                -6.14983327377462,
                -6.15739218745437,
                -6.16527306214749,
                -6.17332057871957,
                -6.18138213453533,
                -6.18930727580346,
                -6.19694713095323,
                -6.20415384416218,
                -6.21078000790922,
                -6.21667809322082,
                -6.22169987610236,
                -6.22569585849362,
                -6.22851468195279,
                -6.23000253215164,
            ]
        ],
        dtype=th.float32,
    )
    x0_initial = th.zeros((1, 4), dtype=u_controls.dtype)
    params = th.tensor(
        [10.0, 0.1, 0.1, 0.25, 0.25, 9.81], dtype=u_controls.dtype
    ).reshape((1, -1))

    # set the initial condition
    x0_initial = th.tensor([0.0, np.pi / 4.0, 0.0, 0.0], dtype=th.float32).reshape(
        [1, -1]
    )

    # network = Network(input_dim=4)

    x_out = DynamicsLayer.apply(params, step_size, u_controls, x0_initial)

    # _, T, V = EnergyLoss.evaluate_single_loss(params=params, x_states=x_out)

    # total_energy = (T + V).detach().numpy()

    x_out_detached = x_out.detach().cpu()

    fig, ((ax0, ax1), (ax2, ax3), (ax4, _)) = plt.subplots(nrows=3, ncols=2)

    # angle and angle derivative
    ax0.plot(x_out_detached[0, :, 1])
    ax0.set_xlabel("Time")
    ax0.set_ylabel("Radians")
    ax0.grid()

    ax1.plot(x_out_detached[0, :, 3])
    ax1.set_xlabel("Time")
    ax1.set_ylabel("Radians / s")
    ax1.grid()

    # position and position derivative
    ax2.plot(x_out_detached[0, :, 0])
    ax2.set_xlabel("Time")
    ax2.set_ylabel("Meters")
    ax2.grid()

    ax3.plot(x_out_detached[0, :, 2])
    ax3.set_xlabel("Time")
    ax3.set_ylabel("Meters / s")
    ax3.grid()

    # plot energy
    # ax4.plot(total_energy[0, :])
    # ax4.set_xlabel("Time")
    # ax4.set_ylabel("Joules")
    # ax4.grid()

    plt.show()


if __name__ == "__main__":
    main()
