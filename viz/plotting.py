import dataclasses
import typing as T

import dataclasses_json
import numpy as np
import torch as th

from model.train import DynamicsLayer


@dataclasses_json.dataclass_json
@dataclasses.dataclass
class SingleCartPoleState:
    b_x: float
    theta_1: float
    b_x_dot: float
    theta_1_dot: float


@dataclasses_json.dataclass_json
@dataclasses.dataclass
class SingleCartPoleSystem:
    dt: float
    u_controls: T.List[float]
    states: T.List[SingleCartPoleState]


def compute_values():
    step_size = 0.01
    u_controls = th.tensor(
        [
            [
                -508.0437389208366,
                -522.7882217220701,
                72.71311001452037,
                332.1194607412527,
                402.8535440529557,
                375.91658300921404,
                297.9082958666572,
                194.47870094707358,
                84.28427644329443,
                -16.266663157415834,
                -92.73569419201098,
                -136.83403334316262,
                -149.87700890259532,
                -140.2747640540227,
                -118.15222070218671,
                -91.408403101515,
                -64.71127222378057,
                -40.37460531577824,
                -19.488504593655712,
                -2.590361452721127,
                10.099875153015457,
                18.64922123236342,
                23.410100940523293,
                24.96907310422519,
                24.053826547460133,
                21.42143148969961,
                17.767438995519765,
                13.670930303866749,
                9.574813572215072,
                5.790802307915447,
                2.516986561304886,
                -0.14084821894613933,
                -2.148786995513112,
                -3.526781213067996,
                -4.3331029724819565,
                -4.65090422539424,
                -4.57666587496385,
                -4.210533911151358,
                -3.648632791067124,
                -2.9774066220364217,
                -2.2699280111649838,
                -1.583995987691902,
                -0.9617542699130521,
                -0.43050977843404836,
                -0.0044153724256208345,
                0.31330702823305556,
                0.5278935689206656,
                0.6505585972500026,
                0.6961942143996702,
                0.6813769458708173,
                0.622753805557458,
                0.5358321995274796,
                0.4341604837434662,
                0.3288593692829899,
                0.22844814118226678,
                0.1389022887775376,
                0.06387869141932363,
                0.005048991016792804,
                -0.03751055919752111,
                -0.06491511950478894,
                -0.07908559374386753,
                -0.08240406799765615,
                -0.0774244127270877,
                -0.06664460677683903,
                -0.052341291809215935,
                -0.0364625130037693,
                -0.020571485446888985,
                -0.005832403343560291,
                0.006971414451008722,
                0.01739659754274246,
                0.025284774012481276,
                0.03070113263167142,
                0.033872578503142466,
                0.0351300412286153,
                0.034858031678985636,
                0.033453230187252686,
                0.03129278237012389,
                0.028712106118354848,
                0.02599137789183934,
                0.023349453578371978,
                0.020943761633372252,
                0.018874649743765733,
                0.017192733680104478,
                0.015907951681942756,
                0.014999236320422537,
                0.014423949319021877,
                0.014126460250986466,
                0.014045469867223647,
                0.01411987120174743,
                0.014293099771420823,
                0.014516045438390138,
                0.014748683582425245,
                0.014960635202579233,
                0.01513088918595755,
                0.015246920766817839,
                0.015303423918138492,
                0.015300847611724427,
                0.015243891505698277,
                0.015140079788318578,
                0.01499849597211153,
                0.014828728656178928,
                0.014640050319471125,
                0.014440828772383892,
                0.014238154222465993,
                0.014037653733102257,
                0.013843458564480196,
                0.013658287675626258,
                0.013483611691698724,
                0.013319864956093825,
                0.013166678090721232,
                0.013023109069579453,
                0.012887856523633253,
                0.012759444448205016,
                0.012636372300875477,
                0.01251722851921043,
                0.012400768625133892,
                0.012285961328639017,
                0.01217200749172008,
                0.012058337517615963,
                0.011944592870294745,
                0.011830597107874718,
                0.011716321198803068,
                0.011601847087450691,
                0.011487332574937456,
                0.011372979717604864,
                0.011259008122030978,
                0.011145633802174856,
                0.011033053715102863,
                0.010921435627740369,
                0.010810912685683632,
                0.010701581878853651,
                0.010593505509874323,
                0.010486714800217305,
                0.010381214823224233,
                0.010276990066103203,
                0.010174010067788685,
                0.010072234698579962,
                0.009971618794487856,
                0.009872115980582378,
                0.009773681608768911,
                0.009616675022419363,
                0.009508973635755272,
                0.009429683227008906,
                0.009363822531246749,
                0.009301291285528437,
                0.009235846145773802,
                0.009164179714851534,
                0.00908511657282407,
                0.008998933470722142,
                0.008906804375441127,
                0.008810365393885827,
                0.008711390059516474,
                0.008611562212995597,
                0.00851233174221587,
                0.00841483766871269,
                0.00831988330013117,
                0.00822794919516083,
                0.00813923128471171,
                0.008053693440845472,
                0.007971125877233712,
                0.007891202854872242,
                0.007813535115838058,
                0.00773771418606356,
                0.007663347135041923,
                0.007590081527881404,
                0.007517621139582903,
                0.007445733574614172,
                0.0073742512652862635,
                0.007303067437693392,
                0.007232128614315381,
                0.007161425078253042,
                0.007090980512632253,
                0.007020841784816698,
                0.006951069583752259,
                0.006881730382325937,
                0.006812889970694916,
                0.0067446086439471725,
                0.006676937972572045,
                0.006609918992179789,
                0.006543581588822081,
                0.006477944826066395,
                0.0064130179486588945,
                0.0063488018293696435,
                0.006285290639222271,
                0.006222473567118983,
                0.006160336457985832,
                0.0060988632672776405,
                0.0060380372845586505,
                0.0059778420866678506,
                0.005918262232687169,
                0.0058592837093556505,
                0.005800894163484116,
                0.005743082957886225,
                0.005685841092270286,
                0.0056291610284754795,
                0.005573036461048481,
                0.005517462058730063,
                0.0054624332068506365,
                0.005407945766629063,
                0.005353995866457489,
            ]
        ],
        dtype=th.float64,
    )
    params = th.tensor(
        [1.0, 0.1, 0.1, 0.25, 0.25, 9.81], dtype=u_controls.dtype
    ).reshape((1, -1))

    # set the initial condition
    x0_initial = th.tensor([0.0, -th.pi / 2, 0.0, 0.0], dtype=th.float64).reshape(
        [1, -1]
    )

    # x0_initial = th.tensor([0.040715601600028725, 1.5708630095223342, -0.0006442272854105014, -0.00013798930126508464],
    #                        dtype=th.float32).reshape([1, -1])

    # x0_initial = th.tensor([0, 1.4707963267948965, 0, 0],
    #                        dtype=th.float32).reshape([1, -1])

    x_out = (
        DynamicsLayer.apply(params, step_size, u_controls, x0_initial).detach().numpy()
    )
    x_out = x_out[0, ...]

    u_controls = u_controls.detach().numpy()[0, ...]

    # import ipdb
    # ipdb.set_trace()

    return SingleCartPoleSystem(
        dt=step_size,
        u_controls=u_controls.astype(float).tolist(),
        states=[SingleCartPoleState(*x) for x in x_out.astype(float)],
    ).to_json()
